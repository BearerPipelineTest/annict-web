- title = t "head.title.db.pvs.index"
- set_meta_tags(title: title, reverse: true, prefix: false)


.l-topbar.container-fluid.px-3
  .row.flex-items-xs-between
    .col-8
      = render "db/application/topbar_title", parent: @work, child: title
    - if user_signed_in? && current_user.committer?
      .col.text-right
        = link_to new_db_work_pv_path(@work), class: "btn btn-outline-primary" do
          = icon "edit"
          = t "head.title.db.pvs.new"

= render "db/works/subnav", work: @work

.container-fluid.p-3
  - if @pvs.present?
    .c-card
      table.table.table-hover
        thead
          tr
            th ID
            th = t "activerecord.attributes.pv.thumbnail"
            th = t "noun.video_page"
            th = t "activerecord.attributes.pv.title"
            th = t "activerecord.attributes.pv.sort_number"
            th = t "head.title.db.pvs.activities"
            - if policy(@pvs).edit?
              th = t "noun.edit"
            - if policy(@pvs).hide?
              th = t "noun.state_change"
            - if policy(@pvs).destroy?
              th = t "noun.delete"
        tbody
          - @pvs.each do |pv|
            tr
              td = pv.id
              td = ann_image_tag(pv, :image, size: "70x70", class: "rounded img-thumbnail")
              td
                - if pv.youtube?
                  span.mr-1
                    | YouTube:
                  = link_to pv.youtube_video_id, pv.url, target: "_blank", rel: "noopener"
                - else
                  = link_with_domain pv.url
              td = pv.title
              td = pv.sort_number
              td = link_to t("head.title.db.pvs.activities"), activities_db_pv_path(pv)
              - if policy(pv).edit?
                td
                  = link_to t("noun.edit"), edit_db_pv_path(pv), class: "btn btn-primary btn-sm"
              - if policy(pv).hide?
                td
                  - if pv.published?
                    = link_to t("noun.unpublish"), hide_db_pv_path(pv), class: "btn btn-warning btn-sm", data: { method: "patch", confirm: t("messages._common.are_you_sure") }
              - if policy(pv).destroy?
                td = link_to t("noun.delete"), db_pv_path(pv), class: "btn btn-danger btn-sm", data: { method: :delete, confirm: t("messages._common.are_you_sure") }

  - else
    = render "application/components/empty", text: t("resources.pv.there_are_no_pvs")
